/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  AsyncMetadata,
} from './behaviors/async-data-behavior';
import {
  AcOption,
} from './utils/types/ac-option';
import {
  CustomValidityState,
  ValidatorFn,
} from './utils/validations/validations';
import {
  FormFieldBehavior,
} from './behaviors/form-behavior';
import {
  AcDropOption,
} from './components/molecules/ac-drop-down-menu/ac-drop-option';
import {
  ControllerComponentOptions,
} from './behaviors/controller-behavior/controller-behavior';
import {
  AcModal,
} from './components/organisms/ac-modal/ac-modal';
import {
  AcOverlay,
} from './components/portals/ac-overlay/ac-overlay';
import {
  AcNavdrawer,
} from './components/atoms/ac-navdrawer/ac-navdrawer';
import {
  AcPanel,
} from './components/organisms/ac-panel/ac-panel';
import {
  AcPopper,
} from './components/portals/ac-popper/ac-popper';
import {
  Placement,
  PopperOptions,
} from 'popper.js';
import {
  Options,
} from './components/atoms/ac-table/ac-table';
import {
  AcToast,
} from './components/atoms/ac-toast/ac-toast';

export namespace Components {
  interface AcAutocomplete {
    /**
    * Set the disabled mode.
    */
    'disabled': boolean;
    /**
    * Set the field in the error state with a message.
    */
    'error': string | boolean;
    /**
    * Action to be call when the user start typing.
    */
    'fetch': (params: { filter: string }) => Promise<AsyncMetadata<AcOption[]>>;
    /**
    * Used to provide access to the FormField instance.
    */
    'getFormFieldBehavior': () => Promise<FormFieldBehavior>;
    /**
    * The label text of the input.
    */
    'label': string;
    /**
    * Set the loading mode, showing a loading icon.
    */
    'loading': boolean;
    /**
    * The name of the internal input.
    */
    'name': string;
    /**
    * Set the custom empty result text.
    */
    'noResultsLabel': string;
    /**
    * The options that will be displayed in the panel.
    */
    'options': AcOption[];
    /**
    * The native required attribute.
    */
    'required': boolean;
    /**
    * Select size
    */
    'size': 'small' | 'large';
    /**
    * The validator functions.
    */
    'validator': ValidatorFn | ValidatorFn[];
    /**
    * The validity state.
    */
    'validity': CustomValidityState;
    /**
    * The value of the input.
    */
    'value': any;
  }
  interface AcAvatar {
    'href': string;
    'image': string;
    'mode': 'list-item' | undefined;
    'subtitle': string;
    'target': string;
    'title': string;
  }
  interface AcBadge {
    'floating': boolean;
    'theme': 'alert' | 'warning' | 'success' | 'info';
  }
  interface AcButton {
    /**
    * The HTML5 native disable prop.
    */
    'disabled'?: boolean;
    /**
    * Button width.
    */
    'expand': 'block' | undefined;
    /**
    * Fill mode: * flat - No borders and no raising * solid - Raised button, default * clear - No background and borders
    */
    'fill': 'clear' | 'solid' | 'flat';
    /**
    * An optional link to open when click on it. Turns the button into a anchor element.
    */
    'href'?: string;
    /**
    * Icon only mode, with a square button, centered icon.
    */
    'iconOnly': boolean;
    /**
    * Set the loading mode, showing a loading icon.
    */
    'loading': boolean;
    /**
    * Button shape.
    */
    'shape': 'round' | undefined;
    /**
    * The size of the button.
    */
    'size'?: 'small' | 'large';
    /**
    * The HTML5 native anchor target to handle the href property.
    */
    'target'?: '_blank' | '_self' | '_parent' | '_top' | string;
    /**
    * The theme color defined in the color palette. The default is white.
    */
    'theme': any;
    /**
    * The HTML5 button type. See https://mdn.io/button
    */
    'type': 'button' | 'submit' | 'reset';
  }
  interface AcCard {}
  interface AcCheck {
    /**
    * The actual checked state.
    */
    'checked': boolean;
    /**
    * Set the label direction.
    */
    'direction': 'left' | 'right';
    /**
    * The native disabled mode.
    */
    'disabled': boolean;
    /**
    * Error state and message of this field.
    */
    'error': string;
    /**
    * The FormFieldBehavior instance.
    */
    'formFieldBehavior': any;
    /**
    * Used to provide access to the FormField instance.
    */
    'getFormFieldBehavior': () => Promise<any>;
    'getNativeFormField': () => Promise<HTMLInputElement>;
    /**
    * The helper text to guide the user.
    */
    'helperText': string;
    /**
    * The textual label of this field.
    */
    'label': string;
    /**
    * The HTML field name.
    */
    'name': string;
    /**
    * Mark this field as required.
    */
    'required': boolean;
    /**
    * The type of this field.
    */
    'type': 'radio' | 'checkbox';
    /**
    * Validation pipeline for this field.
    */
    'validator': ValidatorFn | ValidatorFn[];
    /**
    * The validity state.
    */
    'validity': CustomValidityState;
    /**
    * The HTML field value.
    */
    'value': string;
  }
  interface AcDatePicker {
    'altField': string;
    'altFieldDateFormat': string;
    'autoClose': boolean;
    'classes': string;
    'clear': () => Promise<void>;
    'clearButton': boolean;
    'dateFormat': string;
    'dateTimeSeparator': string;
    'destroy': () => Promise<void>;
    'disableNavWhenOutOfRange': boolean;
    /**
    * If this field is in the disabled state.
    */
    'disabled': boolean;
    'firstDay': string;
    'formattedValue': string;
    'getElement': () => Promise<HTMLElement>;
    /**
    * Used to provide access to the FormField instance.
    */
    'getFormFieldBehavior': () => Promise<any>;
    'getSelectedDates': () => Promise<Date[]>;
    'hide': () => Promise<void>;
    'hoursStep': number;
    'inline': boolean;
    'isShowing': boolean;
    'keyboardNav': boolean;
    'label': string;
    'language': string;
    'maxDate': string;
    'maxHours': number;
    'maxMinutes': number;
    'minDate': string;
    'minHours': number;
    'minMinutes': number;
    'minView': string;
    'minutesStep': number;
    'monthsField': string;
    'moveToOtherMonthsOnSelect': boolean;
    'moveToOtherYearsOnSelect': boolean;
    'multipleDates': boolean | number;
    'multipleDatesSeparator': string;
    /**
    * The form field name.
    */
    'name': string;
    'next': () => Promise<void>;
    'offset': number;
    'onlyTimepicker': boolean;
    'position': string;
    'prev': () => Promise<void>;
    'range': boolean;
    'removeDate': (date: Date) => Promise<void>;
    /**
    * If this field component is required.
    */
    'required': boolean;
    'selectDate': (date: Date) => Promise<void>;
    'selectOtherMonths': boolean;
    'selectOtherYears': boolean;
    'setDate': (date: Date) => Promise<void>;
    'setView': (view: string) => Promise<void>;
    'showEvent': string;
    'showOtherMonths': boolean;
    'showOtherYears': boolean;
    'startDate': Date;
    'timeFormat': string;
    'timepicker': boolean;
    'todayButton': boolean;
    'toggleSelected': boolean;
    'update': (field: string, value: any) => Promise<void>;
    /**
    * The validators that ensure the field validity.
    */
    'validator': ValidatorFn | ValidatorFn[];
    /**
    * The validity state of the FormField.
    */
    'validity': CustomValidityState;
    /**
    * The field value of the component.
    */
    'value': Date | Date[];
    'view': string;
    'weekends': number[];
  }
  interface AcDropDownMenu {
    /**
    * Compact mode.
    */
    'compact': boolean;
    /**
    * List of all options.
    */
    'options': AcDropOption[];
    /**
    * Value of selected option.
    */
    'value': any;
  }
  interface AcDropOption {
    /**
    * Image to be display in the left.
    */
    'image': string;
    /**
    * (Optional) Image description.
    */
    'imageDescription': string;
    /**
    * Label to be display.
    */
    'label': string;
    /**
    * Flag that mark the selected option.
    */
    'selected': boolean;
    /**
    * Value of the option.
    */
    'value': string;
  }
  interface AcGauge {
    'percent': number;
    'size': number;
    'theme': string;
  }
  interface AcHeader {
    'scrolled': boolean;
    'theme': string;
  }
  interface AcInput {
    /**
    * The native HTMLInputElement autocapitalize attribute.
    */
    'autocapitalize': string;
    /**
    * The native HTMLInputElement autocomplete attribute.
    */
    'autocomplete': string;
    /**
    * The native HTMLInputElement autofocus attribute.
    */
    'autofocus': boolean;
    /**
    * The disabled mode.
    */
    'disabled': boolean;
    /**
    * Set the component in the error state with a message.
    */
    'error': string | boolean;
    /**
    * Used to provide access to the FormField instance.
    */
    'getFormFieldBehavior': () => Promise<any>;
    'getNativeFormField': () => Promise<any>;
    /**
    * Get the unmasked value.
    */
    'getRawValue': (type?: string) => Promise<any>;
    /**
    * The helper text to guide the user.
    */
    'helperText': string;
    /**
    * The label text of the this input group.
    */
    'label': string;
    /**
    * The mask of the input.
    */
    'mask': string;
    /**
    * The native HTMLInputElement max attribute.
    */
    'max': number;
    /**
    * The native HTMLInputElement maxlength attribute.
    */
    'maxlength': number;
    /**
    * The native HTMLInputElement min attribute.
    */
    'min': number;
    /**
    * The native HTMLInputElement min attribute.
    */
    'minlength': number;
    /**
    * The HTML input field's name.
    */
    'name': string;
    /**
    * The native HTMLInputElement pattern attribute.
    */
    'pattern': string;
    /**
    * The native HTMLInputElement required attribute.
    */
    'required': boolean;
    /**
    * Set focus state in the native input.
    */
    'setFocus': () => Promise<any>;
    /**
    * Update the value and run validations as if the user change it manually. When to use each: input.value will only update the value, useful to set the initial value of the input. input.setValue is useful to use values that are automatically set by an user's action, setting the unchecked state to the form.
    */
    'setValue': (value: any) => Promise<void>;
    /**
    * The native HTMLInputElement step attribute.
    */
    'step': number;
    /**
    * The type of the internal input.
    */
    'type': string;
    /**
    * Request check validation on each input key event.
    */
    'validateOnKeyup': boolean;
    /**
    * The validations that this field need. This validations are checked on: - Blur event - Form submit event - Each keyUp event ONLY IF the validateOnKeyup property is present.
    */
    'validator': ValidatorFn | ValidatorFn[];
    /**
    * Get the last validity state from the checkValidity.
    */
    'validity': CustomValidityState;
    /**
    * The value of the internal input.
    */
    'value': any;
  }
  interface AcInputBase {
    /**
    * The native HTMLInputElement autocapitalize attribute.
    */
    'autocapitalize': string;
    /**
    * The native HTMLInputElement autocomplete attribute.
    */
    'autocomplete': string;
    /**
    * The native HTMLInputElement autofocus attribute.
    */
    'autofocus': boolean;
    /**
    * The HTMLInputElement disabled attribute.
    */
    'disabled': boolean;
    /**
    * Error mode.
    */
    'error': boolean;
    'getNativeInput': () => Promise<HTMLInputElement>;
    /**
    * The label text of the this input group.
    */
    'label': string;
    /**
    * The native HTMLInputElement max attribute.
    */
    'max': number;
    /**
    * The native HTMLInputElement maxlength attribute.
    */
    'maxlength': number;
    /**
    * The native HTMLInputElement min attribute.
    */
    'min': number;
    /**
    * The native HTMLInputElement min attribute.
    */
    'minlength': number;
    /**
    * The native HTMLInputElement name attribute.
    */
    'name': string;
    /**
    * The native HTMLInputElement pattern attribute.
    */
    'pattern': string;
    /**
    * The native HTMLInputElement placeholder attribute.
    */
    'placeholder': string;
    /**
    * Enable readonly.
    */
    'readonly': boolean;
    /**
    * The native HTMLInputElement required attribute.
    */
    'required': boolean;
    /**
    * Set focus state in the native input.
    */
    'setFocus': () => Promise<void>;
    /**
    * The input's size.
    */
    'size'?: 'small' | 'large';
    /**
    * The native HTMLInputElement step attribute.
    */
    'step': number;
    /**
    * The theme color defined in the color palette.
    */
    'theme': string;
    /**
    * The type of the internal input.
    */
    'type': string;
    /**
    * The value of the internal input.
    */
    'value': any;
  }
  interface AcLayout {
    /**
    * Collapse a nav drawer.
    */
    'collapsed': 'nav-left';
  }
  interface AcLogin {
    'backgroundImageSrc': string;
  }
  interface AcMenu {
    'iconOnly': boolean;
    'noResultsLabel': string;
    'searchLabel': string;
    'searchable': boolean;
    'selected': string | number;
  }
  interface AcMenuItem {
    'active': boolean;
    'collapsed': boolean;
    'disabled': boolean;
    'hidden': boolean;
    'href': string;
    'iconOnly': boolean;
    'submenu': boolean;
  }
  interface AcModal {
    /**
    * The title that will be displayed on the modal.
    */
    'title': string;
  }
  interface AcModalController {
    /**
    * An optional property used to refer the parent element that the component will be attached to.
    */
    'bound': string;
    /**
    * Setup a new modal on the screen.
    */
    'create': (props: ControllerComponentOptions<AcModal & AcOverlay>) => Promise<any>;
    /**
    * Clear all modals that are displayed.
    */
    'dismiss': (data: any) => Promise<any>;
  }
  interface AcNavdrawer {
    /**
    * Compact mode.
    */
    'compact': boolean;
    /**
    * Control the mode of the navedrawer.
    */
    'mode': 'push' | 'over';
    /**
    * List of option to be show on the header.
    */
    'options': AcDropOption[];
    /**
    * Show or hide toggle button
    */
    'showToggle': boolean;
    /**
    * The color theme.
    */
    'theme': string;
    /**
    * Show title in the navdrawer and toggle header
    */
    'title': string;
  }
  interface AcNavdrawerController {
    /**
    * An optional property used to refer the parent element that the component will be attached to.
    */
    'bound': string;
    /**
    * Setup a new navdrawer on the screen.
    */
    'create': (props: ControllerComponentOptions<AcNavdrawer & AcOverlay>) => Promise<any>;
    /**
    * Clear all modals that are displayed.
    */
    'dismiss': () => Promise<void>;
  }
  interface AcOrderList {
    'filterText': string;
    'getSelectedOptions': () => Promise<AcOption<{}>[]>;
    /**
    * Used to customize the field label
    */
    'label': string;
    /**
    * If true, the component will handle multiple selected items.
    */
    'multiple': boolean;
    /**
    * Message that will be rendered with the search results in zero items
    */
    'noResultsLabel': string;
    /**
    * List of all options available.
    */
    'options': AcOption[];
    /**
    * Used to customize the searchbar's label
    */
    'searchLabel': string;
  }
  interface AcOverlay {
    /**
    * The backdrop theme.
    */
    'backdrop': 'dark' | 'light';
    'disableClose': boolean;
    'handleBackDropClick': () => Promise<void>;
    'noLayer': boolean;
    /**
    * Content position based on flex layout.
    */
    'position': 'start start' | 'start center' | 'start flex-end' |
    'center start' | 'center center' | 'center flex-end' |
    'flex-end start' | 'flex-end center' | 'flex-end flex-end';
    /**
    * Used to pass the custom children to the portal.
    */
    'vchildren': any;
  }
  interface AcPagination {
    /**
    * Used to localize the Next button label.
    */
    'nextLabel': string;
    /**
    * Used to localize the Previous button label.
    */
    'previousLabel': string;
    /**
    * The selected page.
    */
    'selected': number;
    /**
    * The amount of pages.
    */
    'totalPages': number;
  }
  interface AcPanel {}
  interface AcPanelController {
    /**
    * An optional property used to refer the parent element that the component will be attached to.
    */
    'bound': string;
    /**
    * Setup a new modal on the screen.
    */
    'create': (props: ControllerComponentOptions<AcPanel & AcPopper>) => Promise<any>;
    /**
    * Clear all modals that are displayed.
    */
    'dismiss': (elt?: any) => Promise<any>;
  }
  interface AcPickList {
    /**
    * Label of the button that add all options on the selected ac-list.
    */
    'addAllLabel': string;
    /**
    * Label of the button that add options on the  selected ac-list.
    */
    'addLabel': string;
    /**
    * Label for ac-list of avalible options
    */
    'availableLabel': string;
    /**
    * Return the selected items.
    */
    'getSelectedOptions': () => Promise<any>;
    /**
    * Label to be show when no results is fouond.
    */
    'noResultsLabel': string;
    /**
    * List of all options available.
    */
    'options': AcOption[];
    /**
    * Label of the button that remove all options on the  selected ac-list.
    */
    'removeAllLabel': string;
    /**
    * Label of the button that remove options on the on selected ac-list.
    */
    'removeLabel': string;
    /**
    * Text to be search.
    */
    'searchLabel': string;
    /**
    * Label for ac-list of selected options
    */
    'selectedLabel': string;
  }
  interface AcPopper {
    /**
    * Popper.js's options.
    */
    'popperOptions': PopperOptions;
    /**
    * Pivot element used to place the popper.
    */
    'popperPivot': string | HTMLElement;
    /**
    * Popper.js's placement.
    */
    'popperPlacement': Placement;
    /**
    * Used to pass the custom children to the portal.
    */
    'vchildren': any;
  }
  interface AcPortal {
    /**
    * Used to pass the custom children to the portal.
    */
    'vchildren': any;
  }
  interface AcProgress {
    /**
    * Set the bar's percentage.
    */
    'percent': number;
    /**
    * Set the theme color.
    */
    'theme': string;
  }
  interface AcSelect {
    /**
    * Set the disabled mode.
    */
    'disabled': boolean;
    /**
    * Set the field in the error state with a message.
    */
    'error': string | boolean;
    /**
    * Set the loading mode, showing a loading icon.
    */
    'fetch': (params: any) => Promise<{ links?: any, meta?: any, data: AcOption[] }>;
    /**
    * Used to provide access to the FormField instance.
    */
    'getFormFieldBehavior': () => Promise<any>;
    'getNativeFormField': () => Promise<HTMLSelectElement>;
    'getSelectedOptions': () => Promise<AcOption<{}>[]>;
    /**
    * The helper text to guide the user.
    */
    'helperText': string;
    /**
    * The label text of the this input group.
    */
    'label': string;
    /**
    * Set the loading mode, showing a loading icon.
    */
    'loading': boolean;
    /**
    * If true, the component will handle multiple selected items.
    */
    'multiple': boolean;
    /**
    * The name of the internal input.
    */
    'name': string;
    /**
    * Set the custom empty result text.
    */
    'noResultsLabel': string;
    /**
    * The options that will be displayed in the panel.
    */
    'options': AcOption[];
    /**
    * The native required attribute.
    */
    'required': boolean;
    /**
    * Set the custom search helper text.
    */
    'searchHelperLabel': string;
    /**
    * Set the search mode.
    */
    'searchable': boolean;
    'setInitialOption': (option: AcOption<{}> | AcOption<{}>[]) => Promise<void>;
    'setValue': (values: any) => Promise<void>;
    /**
    * Select size
    */
    'size': 'small' | 'large';
    /**
    * The validator functions.
    */
    'validator': ValidatorFn | ValidatorFn[];
    /**
    * The validity state.
    */
    'validity': CustomValidityState;
    /**
    * The value of the internal input.
    */
    'value': (string | number)[] | string | number;
  }
  interface AcShape {}
  interface AcStepper {
    /**
    * The number of concluded steps.
    */
    'done': number;
    /**
    * Increments the count of concluded steps.
    */
    'next': () => Promise<void>;
    /**
    * Decrement the count of concluded steps.
    */
    'previous': () => Promise<void>;
    /**
    * The count of steps to be displayed. TODO: It mighty support an array of steps in the future.
    */
    'steps': number;
  }
  interface AcTab {
    /**
    * If true, mark this tab as a selected tab.
    */
    'active': boolean;
    /**
    * Set this tab in compact mode.
    */
    'compact': boolean;
  }
  interface AcTable {
    'fetch': any;
    'loading': boolean;
    'noResultsLabel': string;
    'options': Options;
    'params': { ordering: string; property: string; selected: number; filters: { limitRows: string; totalRows: string; search: string; }; };
    'selectRow': any;
    'update': () => Promise<void>;
  }
  interface AcTabs {
    'compact': boolean;
    'selected': string | number;
    /**
    * The theme color defined in the color palette. The default is primary.
    */
    'theme': string;
  }
  interface AcToast {
    'close': () => Promise<void>;
    'message': string;
    'title': string;
    'type': 'alert' | 'success' | 'info' | 'warning';
  }
  interface AcToastController {
    /**
    * An optional property used to refer the parent element that the component will be attached to.
    */
    'bound': string;
    /**
    * Set properties to the managed component.
    */
    'create': (props: ControllerComponentOptions<AcToast>) => Promise<any>;
    /**
    * Clear properties of the managed component.
    */
    'dismiss': (data: any) => Promise<any>;
  }
  interface AcToggle {
    /**
    * The actual checked state.
    */
    'checked': boolean;
    /**
    * Set the label direction.
    */
    'direction': 'left' | 'right';
    /**
    * If this field is in the disabled state.
    */
    'disabled': boolean;
    /**
    * The actual error message.
    */
    'error': string;
    /**
    * Used to provide access to the FormField instance.
    */
    'getFormFieldBehavior': () => Promise<any>;
    'label': string;
    /**
    * The form field name.
    */
    'name': string;
    /**
    * Mark this field as required.
    */
    'required': boolean;
    /**
    * Validation pipeline for this field.
    */
    'validator': ValidatorFn | ValidatorFn[];
    /**
    * The validity state.
    */
    'validity': CustomValidityState;
    /**
    * The field value of the component.
    */
    'value': string;
  }
  interface AcUpload {
    'handleClick': () => Promise<void>;
    'name': string;
    'removeFiles': () => Promise<void>;
    /**
    * The theme color defined in the color palette. The default is primary.
    */
    'theme': string;
    /**
    * Text introduced in Button upload.
    */
    'uploadButtonText': string;
    'value': FileList;
  }
}

declare global {


  interface HTMLAcAutocompleteElement extends Components.AcAutocomplete, HTMLStencilElement {}
  var HTMLAcAutocompleteElement: {
    prototype: HTMLAcAutocompleteElement;
    new (): HTMLAcAutocompleteElement;
  };

  interface HTMLAcAvatarElement extends Components.AcAvatar, HTMLStencilElement {}
  var HTMLAcAvatarElement: {
    prototype: HTMLAcAvatarElement;
    new (): HTMLAcAvatarElement;
  };

  interface HTMLAcBadgeElement extends Components.AcBadge, HTMLStencilElement {}
  var HTMLAcBadgeElement: {
    prototype: HTMLAcBadgeElement;
    new (): HTMLAcBadgeElement;
  };

  interface HTMLAcButtonElement extends Components.AcButton, HTMLStencilElement {}
  var HTMLAcButtonElement: {
    prototype: HTMLAcButtonElement;
    new (): HTMLAcButtonElement;
  };

  interface HTMLAcCardElement extends Components.AcCard, HTMLStencilElement {}
  var HTMLAcCardElement: {
    prototype: HTMLAcCardElement;
    new (): HTMLAcCardElement;
  };

  interface HTMLAcCheckElement extends Components.AcCheck, HTMLStencilElement {}
  var HTMLAcCheckElement: {
    prototype: HTMLAcCheckElement;
    new (): HTMLAcCheckElement;
  };

  interface HTMLAcDatePickerElement extends Components.AcDatePicker, HTMLStencilElement {}
  var HTMLAcDatePickerElement: {
    prototype: HTMLAcDatePickerElement;
    new (): HTMLAcDatePickerElement;
  };

  interface HTMLAcDropDownMenuElement extends Components.AcDropDownMenu, HTMLStencilElement {}
  var HTMLAcDropDownMenuElement: {
    prototype: HTMLAcDropDownMenuElement;
    new (): HTMLAcDropDownMenuElement;
  };

  interface HTMLAcDropOptionElement extends Components.AcDropOption, HTMLStencilElement {}
  var HTMLAcDropOptionElement: {
    prototype: HTMLAcDropOptionElement;
    new (): HTMLAcDropOptionElement;
  };

  interface HTMLAcGaugeElement extends Components.AcGauge, HTMLStencilElement {}
  var HTMLAcGaugeElement: {
    prototype: HTMLAcGaugeElement;
    new (): HTMLAcGaugeElement;
  };

  interface HTMLAcHeaderElement extends Components.AcHeader, HTMLStencilElement {}
  var HTMLAcHeaderElement: {
    prototype: HTMLAcHeaderElement;
    new (): HTMLAcHeaderElement;
  };

  interface HTMLAcInputElement extends Components.AcInput, HTMLStencilElement {}
  var HTMLAcInputElement: {
    prototype: HTMLAcInputElement;
    new (): HTMLAcInputElement;
  };

  interface HTMLAcInputBaseElement extends Components.AcInputBase, HTMLStencilElement {}
  var HTMLAcInputBaseElement: {
    prototype: HTMLAcInputBaseElement;
    new (): HTMLAcInputBaseElement;
  };

  interface HTMLAcLayoutElement extends Components.AcLayout, HTMLStencilElement {}
  var HTMLAcLayoutElement: {
    prototype: HTMLAcLayoutElement;
    new (): HTMLAcLayoutElement;
  };

  interface HTMLAcLoginElement extends Components.AcLogin, HTMLStencilElement {}
  var HTMLAcLoginElement: {
    prototype: HTMLAcLoginElement;
    new (): HTMLAcLoginElement;
  };

  interface HTMLAcMenuElement extends Components.AcMenu, HTMLStencilElement {}
  var HTMLAcMenuElement: {
    prototype: HTMLAcMenuElement;
    new (): HTMLAcMenuElement;
  };

  interface HTMLAcMenuItemElement extends Components.AcMenuItem, HTMLStencilElement {}
  var HTMLAcMenuItemElement: {
    prototype: HTMLAcMenuItemElement;
    new (): HTMLAcMenuItemElement;
  };

  interface HTMLAcModalElement extends Components.AcModal, HTMLStencilElement {}
  var HTMLAcModalElement: {
    prototype: HTMLAcModalElement;
    new (): HTMLAcModalElement;
  };

  interface HTMLAcModalControllerElement extends Components.AcModalController, HTMLStencilElement {}
  var HTMLAcModalControllerElement: {
    prototype: HTMLAcModalControllerElement;
    new (): HTMLAcModalControllerElement;
  };

  interface HTMLAcNavdrawerElement extends Components.AcNavdrawer, HTMLStencilElement {}
  var HTMLAcNavdrawerElement: {
    prototype: HTMLAcNavdrawerElement;
    new (): HTMLAcNavdrawerElement;
  };

  interface HTMLAcNavdrawerControllerElement extends Components.AcNavdrawerController, HTMLStencilElement {}
  var HTMLAcNavdrawerControllerElement: {
    prototype: HTMLAcNavdrawerControllerElement;
    new (): HTMLAcNavdrawerControllerElement;
  };

  interface HTMLAcOrderListElement extends Components.AcOrderList, HTMLStencilElement {}
  var HTMLAcOrderListElement: {
    prototype: HTMLAcOrderListElement;
    new (): HTMLAcOrderListElement;
  };

  interface HTMLAcOverlayElement extends Components.AcOverlay, HTMLStencilElement {}
  var HTMLAcOverlayElement: {
    prototype: HTMLAcOverlayElement;
    new (): HTMLAcOverlayElement;
  };

  interface HTMLAcPaginationElement extends Components.AcPagination, HTMLStencilElement {}
  var HTMLAcPaginationElement: {
    prototype: HTMLAcPaginationElement;
    new (): HTMLAcPaginationElement;
  };

  interface HTMLAcPanelElement extends Components.AcPanel, HTMLStencilElement {}
  var HTMLAcPanelElement: {
    prototype: HTMLAcPanelElement;
    new (): HTMLAcPanelElement;
  };

  interface HTMLAcPanelControllerElement extends Components.AcPanelController, HTMLStencilElement {}
  var HTMLAcPanelControllerElement: {
    prototype: HTMLAcPanelControllerElement;
    new (): HTMLAcPanelControllerElement;
  };

  interface HTMLAcPickListElement extends Components.AcPickList, HTMLStencilElement {}
  var HTMLAcPickListElement: {
    prototype: HTMLAcPickListElement;
    new (): HTMLAcPickListElement;
  };

  interface HTMLAcPopperElement extends Components.AcPopper, HTMLStencilElement {}
  var HTMLAcPopperElement: {
    prototype: HTMLAcPopperElement;
    new (): HTMLAcPopperElement;
  };

  interface HTMLAcPortalElement extends Components.AcPortal, HTMLStencilElement {}
  var HTMLAcPortalElement: {
    prototype: HTMLAcPortalElement;
    new (): HTMLAcPortalElement;
  };

  interface HTMLAcProgressElement extends Components.AcProgress, HTMLStencilElement {}
  var HTMLAcProgressElement: {
    prototype: HTMLAcProgressElement;
    new (): HTMLAcProgressElement;
  };

  interface HTMLAcSelectElement extends Components.AcSelect, HTMLStencilElement {}
  var HTMLAcSelectElement: {
    prototype: HTMLAcSelectElement;
    new (): HTMLAcSelectElement;
  };

  interface HTMLAcShapeElement extends Components.AcShape, HTMLStencilElement {}
  var HTMLAcShapeElement: {
    prototype: HTMLAcShapeElement;
    new (): HTMLAcShapeElement;
  };

  interface HTMLAcStepperElement extends Components.AcStepper, HTMLStencilElement {}
  var HTMLAcStepperElement: {
    prototype: HTMLAcStepperElement;
    new (): HTMLAcStepperElement;
  };

  interface HTMLAcTabElement extends Components.AcTab, HTMLStencilElement {}
  var HTMLAcTabElement: {
    prototype: HTMLAcTabElement;
    new (): HTMLAcTabElement;
  };

  interface HTMLAcTableElement extends Components.AcTable, HTMLStencilElement {}
  var HTMLAcTableElement: {
    prototype: HTMLAcTableElement;
    new (): HTMLAcTableElement;
  };

  interface HTMLAcTabsElement extends Components.AcTabs, HTMLStencilElement {}
  var HTMLAcTabsElement: {
    prototype: HTMLAcTabsElement;
    new (): HTMLAcTabsElement;
  };

  interface HTMLAcToastElement extends Components.AcToast, HTMLStencilElement {}
  var HTMLAcToastElement: {
    prototype: HTMLAcToastElement;
    new (): HTMLAcToastElement;
  };

  interface HTMLAcToastControllerElement extends Components.AcToastController, HTMLStencilElement {}
  var HTMLAcToastControllerElement: {
    prototype: HTMLAcToastControllerElement;
    new (): HTMLAcToastControllerElement;
  };

  interface HTMLAcToggleElement extends Components.AcToggle, HTMLStencilElement {}
  var HTMLAcToggleElement: {
    prototype: HTMLAcToggleElement;
    new (): HTMLAcToggleElement;
  };

  interface HTMLAcUploadElement extends Components.AcUpload, HTMLStencilElement {}
  var HTMLAcUploadElement: {
    prototype: HTMLAcUploadElement;
    new (): HTMLAcUploadElement;
  };
  interface HTMLElementTagNameMap {
    'ac-autocomplete': HTMLAcAutocompleteElement;
    'ac-avatar': HTMLAcAvatarElement;
    'ac-badge': HTMLAcBadgeElement;
    'ac-button': HTMLAcButtonElement;
    'ac-card': HTMLAcCardElement;
    'ac-check': HTMLAcCheckElement;
    'ac-date-picker': HTMLAcDatePickerElement;
    'ac-drop-down-menu': HTMLAcDropDownMenuElement;
    'ac-drop-option': HTMLAcDropOptionElement;
    'ac-gauge': HTMLAcGaugeElement;
    'ac-header': HTMLAcHeaderElement;
    'ac-input': HTMLAcInputElement;
    'ac-input-base': HTMLAcInputBaseElement;
    'ac-layout': HTMLAcLayoutElement;
    'ac-login': HTMLAcLoginElement;
    'ac-menu': HTMLAcMenuElement;
    'ac-menu-item': HTMLAcMenuItemElement;
    'ac-modal': HTMLAcModalElement;
    'ac-modal-controller': HTMLAcModalControllerElement;
    'ac-navdrawer': HTMLAcNavdrawerElement;
    'ac-navdrawer-controller': HTMLAcNavdrawerControllerElement;
    'ac-order-list': HTMLAcOrderListElement;
    'ac-overlay': HTMLAcOverlayElement;
    'ac-pagination': HTMLAcPaginationElement;
    'ac-panel': HTMLAcPanelElement;
    'ac-panel-controller': HTMLAcPanelControllerElement;
    'ac-pick-list': HTMLAcPickListElement;
    'ac-popper': HTMLAcPopperElement;
    'ac-portal': HTMLAcPortalElement;
    'ac-progress': HTMLAcProgressElement;
    'ac-select': HTMLAcSelectElement;
    'ac-shape': HTMLAcShapeElement;
    'ac-stepper': HTMLAcStepperElement;
    'ac-tab': HTMLAcTabElement;
    'ac-table': HTMLAcTableElement;
    'ac-tabs': HTMLAcTabsElement;
    'ac-toast': HTMLAcToastElement;
    'ac-toast-controller': HTMLAcToastControllerElement;
    'ac-toggle': HTMLAcToggleElement;
    'ac-upload': HTMLAcUploadElement;
  }
}

declare namespace LocalJSX {
  interface AcAutocomplete extends JSXBase.HTMLAttributes<HTMLAcAutocompleteElement> {
    /**
    * Set the disabled mode.
    */
    'disabled'?: boolean;
    /**
    * Set the field in the error state with a message.
    */
    'error'?: string | boolean;
    /**
    * Action to be call when the user start typing.
    */
    'fetch'?: (params: { filter: string }) => Promise<AsyncMetadata<AcOption[]>>;
    /**
    * The label text of the input.
    */
    'label'?: string;
    /**
    * Set the loading mode, showing a loading icon.
    */
    'loading'?: boolean;
    /**
    * The name of the internal input.
    */
    'name'?: string;
    /**
    * Set the custom empty result text.
    */
    'noResultsLabel'?: string;
    /**
    * Fired when the user select an option.
    */
    'onSelectChange'?: (event: CustomEvent<any>) => void;
    /**
    * The options that will be displayed in the panel.
    */
    'options'?: AcOption[];
    /**
    * The native required attribute.
    */
    'required'?: boolean;
    /**
    * Select size
    */
    'size'?: 'small' | 'large';
    /**
    * The validator functions.
    */
    'validator'?: ValidatorFn | ValidatorFn[];
    /**
    * The validity state.
    */
    'validity'?: CustomValidityState;
    /**
    * The value of the input.
    */
    'value'?: any;
  }
  interface AcAvatar extends JSXBase.HTMLAttributes<HTMLAcAvatarElement> {
    'href'?: string;
    'image'?: string;
    'mode'?: 'list-item' | undefined;
    'subtitle'?: string;
    'target'?: string;
    'title'?: string;
  }
  interface AcBadge extends JSXBase.HTMLAttributes<HTMLAcBadgeElement> {
    'floating'?: boolean;
    'theme'?: 'alert' | 'warning' | 'success' | 'info';
  }
  interface AcButton extends JSXBase.HTMLAttributes<HTMLAcButtonElement> {
    /**
    * The HTML5 native disable prop.
    */
    'disabled'?: boolean;
    /**
    * Button width.
    */
    'expand'?: 'block' | undefined;
    /**
    * Fill mode: * flat - No borders and no raising * solid - Raised button, default * clear - No background and borders
    */
    'fill'?: 'clear' | 'solid' | 'flat';
    /**
    * An optional link to open when click on it. Turns the button into a anchor element.
    */
    'href'?: string;
    /**
    * Icon only mode, with a square button, centered icon.
    */
    'iconOnly'?: boolean;
    /**
    * Set the loading mode, showing a loading icon.
    */
    'loading'?: boolean;
    /**
    * Button shape.
    */
    'shape'?: 'round' | undefined;
    /**
    * The size of the button.
    */
    'size'?: 'small' | 'large';
    /**
    * The HTML5 native anchor target to handle the href property.
    */
    'target'?: '_blank' | '_self' | '_parent' | '_top' | string;
    /**
    * The theme color defined in the color palette. The default is white.
    */
    'theme'?: any;
    /**
    * The HTML5 button type. See https://mdn.io/button
    */
    'type'?: 'button' | 'submit' | 'reset';
  }
  interface AcCard extends JSXBase.HTMLAttributes<HTMLAcCardElement> {}
  interface AcCheck extends JSXBase.HTMLAttributes<HTMLAcCheckElement> {
    /**
    * The actual checked state.
    */
    'checked'?: boolean;
    /**
    * Set the label direction.
    */
    'direction'?: 'left' | 'right';
    /**
    * The native disabled mode.
    */
    'disabled'?: boolean;
    /**
    * Error state and message of this field.
    */
    'error'?: string;
    /**
    * The FormFieldBehavior instance.
    */
    'formFieldBehavior'?: any;
    /**
    * The helper text to guide the user.
    */
    'helperText'?: string;
    /**
    * The textual label of this field.
    */
    'label'?: string;
    /**
    * The HTML field name.
    */
    'name'?: string;
    /**
    * Mark this field as required.
    */
    'required'?: boolean;
    /**
    * The type of this field.
    */
    'type'?: 'radio' | 'checkbox';
    /**
    * Validation pipeline for this field.
    */
    'validator'?: ValidatorFn | ValidatorFn[];
    /**
    * The validity state.
    */
    'validity'?: CustomValidityState;
    /**
    * The HTML field value.
    */
    'value'?: string;
  }
  interface AcDatePicker extends JSXBase.HTMLAttributes<HTMLAcDatePickerElement> {
    'altField'?: string;
    'altFieldDateFormat'?: string;
    'autoClose'?: boolean;
    'classes'?: string;
    'clearButton'?: boolean;
    'dateFormat'?: string;
    'dateTimeSeparator'?: string;
    'disableNavWhenOutOfRange'?: boolean;
    /**
    * If this field is in the disabled state.
    */
    'disabled'?: boolean;
    'firstDay'?: string;
    'formattedValue'?: string;
    'hoursStep'?: number;
    'inline'?: boolean;
    'isShowing'?: boolean;
    'keyboardNav'?: boolean;
    'label'?: string;
    'language'?: string;
    'maxDate'?: string;
    'maxHours'?: number;
    'maxMinutes'?: number;
    'minDate'?: string;
    'minHours'?: number;
    'minMinutes'?: number;
    'minView'?: string;
    'minutesStep'?: number;
    'monthsField'?: string;
    'moveToOtherMonthsOnSelect'?: boolean;
    'moveToOtherYearsOnSelect'?: boolean;
    'multipleDates'?: boolean | number;
    'multipleDatesSeparator'?: string;
    /**
    * The form field name.
    */
    'name'?: string;
    'offset'?: number;
    'onOnChangeDecade'?: (event: CustomEvent<any>) => void;
    'onOnChangeMonth'?: (event: CustomEvent<any>) => void;
    'onOnChangeView'?: (event: CustomEvent<any>) => void;
    'onOnChangeYear'?: (event: CustomEvent<any>) => void;
    'onOnHide'?: (event: CustomEvent<any>) => void;
    'onOnRenderCell'?: (event: CustomEvent<any>) => void;
    'onOnSelect'?: (event: CustomEvent<any>) => void;
    'onOnShow'?: (event: CustomEvent<any>) => void;
    'onlyTimepicker'?: boolean;
    'position'?: string;
    'range'?: boolean;
    /**
    * If this field component is required.
    */
    'required'?: boolean;
    'selectOtherMonths'?: boolean;
    'selectOtherYears'?: boolean;
    'showEvent'?: string;
    'showOtherMonths'?: boolean;
    'showOtherYears'?: boolean;
    'startDate'?: Date;
    'timeFormat'?: string;
    'timepicker'?: boolean;
    'todayButton'?: boolean;
    'toggleSelected'?: boolean;
    /**
    * The validators that ensure the field validity.
    */
    'validator'?: ValidatorFn | ValidatorFn[];
    /**
    * The validity state of the FormField.
    */
    'validity'?: CustomValidityState;
    /**
    * The field value of the component.
    */
    'value'?: Date | Date[];
    'view'?: string;
    'weekends'?: number[];
  }
  interface AcDropDownMenu extends JSXBase.HTMLAttributes<HTMLAcDropDownMenuElement> {
    /**
    * Compact mode.
    */
    'compact'?: boolean;
    /**
    * Event call on option change.
    */
    'onSelectChange'?: (event: CustomEvent<any>) => void;
    /**
    * List of all options.
    */
    'options'?: AcDropOption[];
    /**
    * Value of selected option.
    */
    'value'?: any;
  }
  interface AcDropOption extends JSXBase.HTMLAttributes<HTMLAcDropOptionElement> {
    /**
    * Image to be display in the left.
    */
    'image'?: string;
    /**
    * (Optional) Image description.
    */
    'imageDescription'?: string;
    /**
    * Label to be display.
    */
    'label'?: string;
    /**
    * Flag that mark the selected option.
    */
    'selected'?: boolean;
    /**
    * Value of the option.
    */
    'value'?: string;
  }
  interface AcGauge extends JSXBase.HTMLAttributes<HTMLAcGaugeElement> {
    'percent'?: number;
    'size'?: number;
    'theme'?: string;
  }
  interface AcHeader extends JSXBase.HTMLAttributes<HTMLAcHeaderElement> {
    'scrolled'?: boolean;
    'theme'?: string;
  }
  interface AcInput extends JSXBase.HTMLAttributes<HTMLAcInputElement> {
    /**
    * The native HTMLInputElement autocapitalize attribute.
    */
    'autocapitalize'?: string;
    /**
    * The native HTMLInputElement autocomplete attribute.
    */
    'autocomplete'?: string;
    /**
    * The native HTMLInputElement autofocus attribute.
    */
    'autofocus'?: boolean;
    /**
    * The disabled mode.
    */
    'disabled'?: boolean;
    /**
    * Set the component in the error state with a message.
    */
    'error'?: string | boolean;
    /**
    * The helper text to guide the user.
    */
    'helperText'?: string;
    /**
    * The label text of the this input group.
    */
    'label'?: string;
    /**
    * The mask of the input.
    */
    'mask'?: string;
    /**
    * The native HTMLInputElement max attribute.
    */
    'max'?: number;
    /**
    * The native HTMLInputElement maxlength attribute.
    */
    'maxlength'?: number;
    /**
    * The native HTMLInputElement min attribute.
    */
    'min'?: number;
    /**
    * The native HTMLInputElement min attribute.
    */
    'minlength'?: number;
    /**
    * The HTML input field's name.
    */
    'name'?: string;
    /**
    * The native HTMLInputElement pattern attribute.
    */
    'pattern'?: string;
    /**
    * The native HTMLInputElement required attribute.
    */
    'required'?: boolean;
    /**
    * The native HTMLInputElement step attribute.
    */
    'step'?: number;
    /**
    * The type of the internal input.
    */
    'type'?: string;
    /**
    * Request check validation on each input key event.
    */
    'validateOnKeyup'?: boolean;
    /**
    * The validations that this field need. This validations are checked on: - Blur event - Form submit event - Each keyUp event ONLY IF the validateOnKeyup property is present.
    */
    'validator'?: ValidatorFn | ValidatorFn[];
    /**
    * Get the last validity state from the checkValidity.
    */
    'validity'?: CustomValidityState;
    /**
    * The value of the internal input.
    */
    'value'?: any;
  }
  interface AcInputBase extends JSXBase.HTMLAttributes<HTMLAcInputBaseElement> {
    /**
    * The native HTMLInputElement autocapitalize attribute.
    */
    'autocapitalize'?: string;
    /**
    * The native HTMLInputElement autocomplete attribute.
    */
    'autocomplete'?: string;
    /**
    * The native HTMLInputElement autofocus attribute.
    */
    'autofocus'?: boolean;
    /**
    * The HTMLInputElement disabled attribute.
    */
    'disabled'?: boolean;
    /**
    * Error mode.
    */
    'error'?: boolean;
    /**
    * The label text of the this input group.
    */
    'label'?: string;
    /**
    * The native HTMLInputElement max attribute.
    */
    'max'?: number;
    /**
    * The native HTMLInputElement maxlength attribute.
    */
    'maxlength'?: number;
    /**
    * The native HTMLInputElement min attribute.
    */
    'min'?: number;
    /**
    * The native HTMLInputElement min attribute.
    */
    'minlength'?: number;
    /**
    * The native HTMLInputElement name attribute.
    */
    'name'?: string;
    /**
    * The native HTMLInputElement pattern attribute.
    */
    'pattern'?: string;
    /**
    * The native HTMLInputElement placeholder attribute.
    */
    'placeholder'?: string;
    /**
    * Enable readonly.
    */
    'readonly'?: boolean;
    /**
    * The native HTMLInputElement required attribute.
    */
    'required'?: boolean;
    /**
    * The input's size.
    */
    'size'?: 'small' | 'large';
    /**
    * The native HTMLInputElement step attribute.
    */
    'step'?: number;
    /**
    * The theme color defined in the color palette.
    */
    'theme'?: string;
    /**
    * The type of the internal input.
    */
    'type'?: string;
    /**
    * The value of the internal input.
    */
    'value'?: any;
  }
  interface AcLayout extends JSXBase.HTMLAttributes<HTMLAcLayoutElement> {
    /**
    * Collapse a nav drawer.
    */
    'collapsed'?: 'nav-left';
    'onContentScroll'?: (event: CustomEvent<{ top: number, left: number }>) => void;
  }
  interface AcLogin extends JSXBase.HTMLAttributes<HTMLAcLoginElement> {
    'backgroundImageSrc'?: string;
  }
  interface AcMenu extends JSXBase.HTMLAttributes<HTMLAcMenuElement> {
    'iconOnly'?: boolean;
    'noResultsLabel'?: string;
    'onMenuChange'?: (event: CustomEvent<string>) => void;
    'searchLabel'?: string;
    'searchable'?: boolean;
    'selected'?: string | number;
  }
  interface AcMenuItem extends JSXBase.HTMLAttributes<HTMLAcMenuItemElement> {
    'active'?: boolean;
    'collapsed'?: boolean;
    'disabled'?: boolean;
    'hidden'?: boolean;
    'href'?: string;
    'iconOnly'?: boolean;
    'submenu'?: boolean;
  }
  interface AcModal extends JSXBase.HTMLAttributes<HTMLAcModalElement> {
    /**
    * Dispatched when the modal closes.
    */
    'onClose'?: (event: CustomEvent<void>) => void;
    /**
    * The title that will be displayed on the modal.
    */
    'title'?: string;
  }
  interface AcModalController extends JSXBase.HTMLAttributes<HTMLAcModalControllerElement> {
    /**
    * An optional property used to refer the parent element that the component will be attached to.
    */
    'bound'?: string;
  }
  interface AcNavdrawer extends JSXBase.HTMLAttributes<HTMLAcNavdrawerElement> {
    /**
    * Compact mode.
    */
    'compact'?: boolean;
    /**
    * Control the mode of the navedrawer.
    */
    'mode'?: 'push' | 'over';
    'onClose'?: (event: CustomEvent<void>) => void;
    /**
    * List of option to be show on the header.
    */
    'options'?: AcDropOption[];
    /**
    * Show or hide toggle button
    */
    'showToggle'?: boolean;
    /**
    * The color theme.
    */
    'theme'?: string;
    /**
    * Show title in the navdrawer and toggle header
    */
    'title'?: string;
  }
  interface AcNavdrawerController extends JSXBase.HTMLAttributes<HTMLAcNavdrawerControllerElement> {
    /**
    * An optional property used to refer the parent element that the component will be attached to.
    */
    'bound'?: string;
  }
  interface AcOrderList extends JSXBase.HTMLAttributes<HTMLAcOrderListElement> {
    'filterText'?: string;
    /**
    * Used to customize the field label
    */
    'label'?: string;
    /**
    * If true, the component will handle multiple selected items.
    */
    'multiple'?: boolean;
    /**
    * Message that will be rendered with the search results in zero items
    */
    'noResultsLabel'?: string;
    /**
    * Event trigger on state change
    * @param acList - Component.
    */
    'onListChange'?: (event: CustomEvent<AcOrderList>) => void;
    /**
    * List of all options available.
    */
    'options'?: AcOption[];
    /**
    * Used to customize the searchbar's label
    */
    'searchLabel'?: string;
  }
  interface AcOverlay extends JSXBase.HTMLAttributes<HTMLAcOverlayElement> {
    /**
    * The backdrop theme.
    */
    'backdrop'?: 'dark' | 'light';
    'disableClose'?: boolean;
    'noLayer'?: boolean;
    'onBackDropClick'?: (event: CustomEvent<void>) => void;
    /**
    * Content position based on flex layout.
    */
    'position'?: 'start start' | 'start center' | 'start flex-end' |
    'center start' | 'center center' | 'center flex-end' |
    'flex-end start' | 'flex-end center' | 'flex-end flex-end';
    /**
    * Used to pass the custom children to the portal.
    */
    'vchildren'?: any;
  }
  interface AcPagination extends JSXBase.HTMLAttributes<HTMLAcPaginationElement> {
    /**
    * Used to localize the Next button label.
    */
    'nextLabel'?: string;
    /**
    * Event emitted when changed tab
    */
    'onPaginationChange'?: (event: CustomEvent<any>) => void;
    /**
    * Used to localize the Previous button label.
    */
    'previousLabel'?: string;
    /**
    * The selected page.
    */
    'selected'?: number;
    /**
    * The amount of pages.
    */
    'totalPages'?: number;
  }
  interface AcPanel extends JSXBase.HTMLAttributes<HTMLAcPanelElement> {
    /**
    * Dispatched when the modal closes.
    */
    'onClose'?: (event: CustomEvent<void>) => void;
  }
  interface AcPanelController extends JSXBase.HTMLAttributes<HTMLAcPanelControllerElement> {
    /**
    * An optional property used to refer the parent element that the component will be attached to.
    */
    'bound'?: string;
  }
  interface AcPickList extends JSXBase.HTMLAttributes<HTMLAcPickListElement> {
    /**
    * Label of the button that add all options on the selected ac-list.
    */
    'addAllLabel'?: string;
    /**
    * Label of the button that add options on the  selected ac-list.
    */
    'addLabel'?: string;
    /**
    * Label for ac-list of avalible options
    */
    'availableLabel'?: string;
    /**
    * Label to be show when no results is fouond.
    */
    'noResultsLabel'?: string;
    /**
    * List of all options available.
    */
    'options'?: AcOption[];
    /**
    * Label of the button that remove all options on the  selected ac-list.
    */
    'removeAllLabel'?: string;
    /**
    * Label of the button that remove options on the on selected ac-list.
    */
    'removeLabel'?: string;
    /**
    * Text to be search.
    */
    'searchLabel'?: string;
    /**
    * Label for ac-list of selected options
    */
    'selectedLabel'?: string;
  }
  interface AcPopper extends JSXBase.HTMLAttributes<HTMLAcPopperElement> {
    /**
    * Popper.js's options.
    */
    'popperOptions'?: PopperOptions;
    /**
    * Pivot element used to place the popper.
    */
    'popperPivot'?: string | HTMLElement;
    /**
    * Popper.js's placement.
    */
    'popperPlacement'?: Placement;
    /**
    * Used to pass the custom children to the portal.
    */
    'vchildren'?: any;
  }
  interface AcPortal extends JSXBase.HTMLAttributes<HTMLAcPortalElement> {
    /**
    * Used to pass the custom children to the portal.
    */
    'vchildren'?: any;
  }
  interface AcProgress extends JSXBase.HTMLAttributes<HTMLAcProgressElement> {
    /**
    * Set the bar's percentage.
    */
    'percent'?: number;
    /**
    * Set the theme color.
    */
    'theme'?: string;
  }
  interface AcSelect extends JSXBase.HTMLAttributes<HTMLAcSelectElement> {
    /**
    * Set the disabled mode.
    */
    'disabled'?: boolean;
    /**
    * Set the field in the error state with a message.
    */
    'error'?: string | boolean;
    /**
    * Set the loading mode, showing a loading icon.
    */
    'fetch'?: (params: any) => Promise<{ links?: any, meta?: any, data: AcOption[] }>;
    /**
    * The helper text to guide the user.
    */
    'helperText'?: string;
    /**
    * The label text of the this input group.
    */
    'label'?: string;
    /**
    * Set the loading mode, showing a loading icon.
    */
    'loading'?: boolean;
    /**
    * If true, the component will handle multiple selected items.
    */
    'multiple'?: boolean;
    /**
    * The name of the internal input.
    */
    'name'?: string;
    /**
    * Set the custom empty result text.
    */
    'noResultsLabel'?: string;
    /**
    * Fired when the user select/deselect an option.
    */
    'onSelectChange'?: (event: CustomEvent<any>) => void;
    /**
    * The options that will be displayed in the panel.
    */
    'options'?: AcOption[];
    /**
    * The native required attribute.
    */
    'required'?: boolean;
    /**
    * Set the custom search helper text.
    */
    'searchHelperLabel'?: string;
    /**
    * Set the search mode.
    */
    'searchable'?: boolean;
    /**
    * Select size
    */
    'size'?: 'small' | 'large';
    /**
    * The validator functions.
    */
    'validator'?: ValidatorFn | ValidatorFn[];
    /**
    * The validity state.
    */
    'validity'?: CustomValidityState;
    /**
    * The value of the internal input.
    */
    'value'?: (string | number)[] | string | number;
  }
  interface AcShape extends JSXBase.HTMLAttributes<HTMLAcShapeElement> {}
  interface AcStepper extends JSXBase.HTMLAttributes<HTMLAcStepperElement> {
    /**
    * The number of concluded steps.
    */
    'done'?: number;
    /**
    * Dispatched when the steps state changes.
    */
    'onStepperChange'?: (event: CustomEvent<{ index: number }>) => void;
    /**
    * The count of steps to be displayed. TODO: It mighty support an array of steps in the future.
    */
    'steps'?: number;
  }
  interface AcTab extends JSXBase.HTMLAttributes<HTMLAcTabElement> {
    /**
    * If true, mark this tab as a selected tab.
    */
    'active'?: boolean;
    /**
    * Set this tab in compact mode.
    */
    'compact'?: boolean;
  }
  interface AcTable extends JSXBase.HTMLAttributes<HTMLAcTableElement> {
    'fetch'?: any;
    'loading'?: boolean;
    'noResultsLabel'?: string;
    'onChangeOrder'?: (event: CustomEvent<any>) => void;
    'onTableChange'?: (event: CustomEvent<any>) => void;
    'options'?: Options;
    'params'?: { ordering: string; property: string; selected: number; filters: { limitRows: string; totalRows: string; search: string; }; };
    'selectRow'?: any;
  }
  interface AcTabs extends JSXBase.HTMLAttributes<HTMLAcTabsElement> {
    'compact'?: boolean;
    'onTabChange'?: (event: CustomEvent<string>) => void;
    'selected'?: string | number;
    /**
    * The theme color defined in the color palette. The default is primary.
    */
    'theme'?: string;
  }
  interface AcToast extends JSXBase.HTMLAttributes<HTMLAcToastElement> {
    'message'?: string;
    'onClose'?: (event: CustomEvent<void>) => void;
    'title'?: string;
    'type'?: 'alert' | 'success' | 'info' | 'warning';
  }
  interface AcToastController extends JSXBase.HTMLAttributes<HTMLAcToastControllerElement> {
    /**
    * An optional property used to refer the parent element that the component will be attached to.
    */
    'bound'?: string;
  }
  interface AcToggle extends JSXBase.HTMLAttributes<HTMLAcToggleElement> {
    /**
    * The actual checked state.
    */
    'checked'?: boolean;
    /**
    * Set the label direction.
    */
    'direction'?: 'left' | 'right';
    /**
    * If this field is in the disabled state.
    */
    'disabled'?: boolean;
    /**
    * The actual error message.
    */
    'error'?: string;
    'label'?: string;
    /**
    * The form field name.
    */
    'name'?: string;
    /**
    * Mark this field as required.
    */
    'required'?: boolean;
    /**
    * Validation pipeline for this field.
    */
    'validator'?: ValidatorFn | ValidatorFn[];
    /**
    * The validity state.
    */
    'validity'?: CustomValidityState;
    /**
    * The field value of the component.
    */
    'value'?: string;
  }
  interface AcUpload extends JSXBase.HTMLAttributes<HTMLAcUploadElement> {
    'name'?: string;
    /**
    * Event when a file is dropped.
    */
    'onUploadFile'?: (event: CustomEvent<FileList>) => void;
    /**
    * The theme color defined in the color palette. The default is primary.
    */
    'theme'?: string;
    /**
    * Text introduced in Button upload.
    */
    'uploadButtonText'?: string;
    'value'?: FileList;
  }

  interface IntrinsicElements {
    'ac-autocomplete': AcAutocomplete;
    'ac-avatar': AcAvatar;
    'ac-badge': AcBadge;
    'ac-button': AcButton;
    'ac-card': AcCard;
    'ac-check': AcCheck;
    'ac-date-picker': AcDatePicker;
    'ac-drop-down-menu': AcDropDownMenu;
    'ac-drop-option': AcDropOption;
    'ac-gauge': AcGauge;
    'ac-header': AcHeader;
    'ac-input': AcInput;
    'ac-input-base': AcInputBase;
    'ac-layout': AcLayout;
    'ac-login': AcLogin;
    'ac-menu': AcMenu;
    'ac-menu-item': AcMenuItem;
    'ac-modal': AcModal;
    'ac-modal-controller': AcModalController;
    'ac-navdrawer': AcNavdrawer;
    'ac-navdrawer-controller': AcNavdrawerController;
    'ac-order-list': AcOrderList;
    'ac-overlay': AcOverlay;
    'ac-pagination': AcPagination;
    'ac-panel': AcPanel;
    'ac-panel-controller': AcPanelController;
    'ac-pick-list': AcPickList;
    'ac-popper': AcPopper;
    'ac-portal': AcPortal;
    'ac-progress': AcProgress;
    'ac-select': AcSelect;
    'ac-shape': AcShape;
    'ac-stepper': AcStepper;
    'ac-tab': AcTab;
    'ac-table': AcTable;
    'ac-tabs': AcTabs;
    'ac-toast': AcToast;
    'ac-toast-controller': AcToastController;
    'ac-toggle': AcToggle;
    'ac-upload': AcUpload;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


