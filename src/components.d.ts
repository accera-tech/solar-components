/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';


import {
  CustomValidityState,
  ValidatorFn,
} from './utils/validations/validations';
import {
  Options,
} from './components/atoms/ac-table/ac-table';
import {
  ControllerComponentOptions,
} from './behaviors/controller-behavior/controller-behavior';
import {
  AcToast,
} from './components/atoms/ac-toast/ac-toast';
import {
  SelectOption,
} from './components/molecules/ac-select/ac-select';
import {
  AcModal,
} from './components/organisms/ac-modal/ac-modal';
import {
  AcOverlay,
} from './components/portals/ac-overlay/ac-overlay';
import {
  AcPanel,
} from './components/organisms/ac-panel/ac-panel';
import {
  AcPopper,
} from './components/portals/ac-popper/ac-popper';
import {
  EventEmitter,
} from '@stencil/core';
import {
  Placement,
  PopperOptions,
} from 'popper.js';


export namespace Components {

  interface AcBadge {
    'text': string;
    'type': 'alert' | 'warning' | 'success';
    'upperCase': boolean;
  }
  interface AcBadgeAttributes extends StencilHTMLAttributes {
    'text'?: string;
    'type'?: 'alert' | 'warning' | 'success';
    'upperCase'?: boolean;
  }

  interface AcButton {
    /**
    * The HTML5 native disable prop.
    */
    'disabled'?: boolean;
    /**
    * Button in width mode.
    */
    'expand': 'block' | 'circle';
    /**
    * Fill mode: * flat - No borders and no raising * solid - Raised button, default * clear - No background and borders
    */
    'fill': 'clear' | 'solid' | 'flat' | 'internal';
    /**
    * An optional link to open when click on it. Turns the button into a anchor element.
    */
    'href'?: string;
    /**
    * Icon only mode, with a square button, centered icon.
    */
    'iconOnly': boolean;
    /**
    * Set the loading mode, showing a loading icon.
    */
    'loading': boolean;
    /**
    * The size of the button:
    */
    'size'?: 'small' | 'compact' | 'large';
    /**
    * The HTML5 native anchor target to handle the href property.
    */
    'target'?: '_blank' | '_self' | '_parent' | '_top' | string;
    /**
    * The theme color defined in the color palette. The default is white.
    */
    'theme'?: string;
    /**
    * The HTML5 button type. See https://mdn.io/button
    */
    'type': 'button' | 'submit' | 'reset';
  }
  interface AcButtonAttributes extends StencilHTMLAttributes {
    /**
    * The HTML5 native disable prop.
    */
    'disabled'?: boolean;
    /**
    * Button in width mode.
    */
    'expand'?: 'block' | 'circle';
    /**
    * Fill mode: * flat - No borders and no raising * solid - Raised button, default * clear - No background and borders
    */
    'fill'?: 'clear' | 'solid' | 'flat' | 'internal';
    /**
    * An optional link to open when click on it. Turns the button into a anchor element.
    */
    'href'?: string;
    /**
    * Icon only mode, with a square button, centered icon.
    */
    'iconOnly'?: boolean;
    /**
    * Set the loading mode, showing a loading icon.
    */
    'loading'?: boolean;
    /**
    * The size of the button:
    */
    'size'?: 'small' | 'compact' | 'large';
    /**
    * The HTML5 native anchor target to handle the href property.
    */
    'target'?: '_blank' | '_self' | '_parent' | '_top' | string;
    /**
    * The theme color defined in the color palette. The default is white.
    */
    'theme'?: string;
    /**
    * The HTML5 button type. See https://mdn.io/button
    */
    'type'?: 'button' | 'submit' | 'reset';
  }

  interface AcCard {}
  interface AcCardAttributes extends StencilHTMLAttributes {}

  interface AcCheck {
    /**
    * The actual checked state.
    */
    'checked': boolean;
    /**
    * Set the label direction.
    */
    'direction': 'left' | 'right';
    /**
    * The native disabled mode.
    */
    'disabled': boolean;
    /**
    * Error state and message of this field.
    */
    'error': string;
    'getNativeFormField': () => Promise<HTMLInputElement>;
    /**
    * The helper text to guide the user.
    */
    'helperText': string;
    /**
    * The textual label of this field.
    */
    'label': string;
    /**
    * The HTML field name.
    */
    'name': string;
    /**
    * Mark this field as required.
    */
    'required': string | boolean;
    /**
    * The type of this field.
    */
    'type': 'radio' | 'checkbox';
    /**
    * Validation pipeline for this field.
    */
    'validator': ValidatorFn | ValidatorFn[];
    /**
    * The validity state.
    */
    'validity': CustomValidityState;
    /**
    * The HTML field value.
    */
    'value': string;
  }
  interface AcCheckAttributes extends StencilHTMLAttributes {
    /**
    * The actual checked state.
    */
    'checked'?: boolean;
    /**
    * Set the label direction.
    */
    'direction'?: 'left' | 'right';
    /**
    * The native disabled mode.
    */
    'disabled'?: boolean;
    /**
    * Error state and message of this field.
    */
    'error'?: string;
    /**
    * The helper text to guide the user.
    */
    'helperText'?: string;
    /**
    * The textual label of this field.
    */
    'label'?: string;
    /**
    * The HTML field name.
    */
    'name'?: string;
    /**
    * Mark this field as required.
    */
    'required'?: string | boolean;
    /**
    * The type of this field.
    */
    'type'?: 'radio' | 'checkbox';
    /**
    * Validation pipeline for this field.
    */
    'validator'?: ValidatorFn | ValidatorFn[];
    /**
    * The validity state.
    */
    'validity'?: CustomValidityState;
    /**
    * The HTML field value.
    */
    'value'?: string;
  }

  interface AcGauge {
    'percent': number;
    'theme': string;
  }
  interface AcGaugeAttributes extends StencilHTMLAttributes {
    'percent'?: number;
    'theme'?: string;
  }

  interface AcHeader {
    'scrolled': boolean;
  }
  interface AcHeaderAttributes extends StencilHTMLAttributes {
    'scrolled'?: boolean;
  }

  interface AcInputBase {
    /**
    * The native HTMLInputElement autocapitalize attribute.
    */
    'autocapitalize': string;
    /**
    * The native HTMLInputElement autocomplete attribute.
    */
    'autocomplete': string;
    /**
    * The native HTMLInputElement autofocus attribute.
    */
    'autofocus': boolean;
    /**
    * The HTMLInputElement disabled attribute.
    */
    'disabled': boolean;
    'getNativeInput': () => Promise<HTMLInputElement>;
    /**
    * The label text of the this input group.
    */
    'label': string;
    /**
    * The native HTMLInputElement max attribute.
    */
    'max': number;
    /**
    * The native HTMLInputElement maxlength attribute.
    */
    'maxlength': number;
    /**
    * The native HTMLInputElement min attribute.
    */
    'min': number;
    /**
    * The native HTMLInputElement min attribute.
    */
    'minlength': number;
    /**
    * The render mode of the input.
    */
    'mode': 'compact';
    /**
    * The native HTMLInputElement name attribute.
    */
    'name': string;
    /**
    * The native HTMLInputElement pattern attribute.
    */
    'pattern': string;
    /**
    * Enable readonly.
    */
    'readonly': boolean;
    /**
    * The native HTMLInputElement required attribute.
    */
    'required': boolean;
    /**
    * Set focus state in the native input.
    */
    'setFocus': () => void;
    /**
    * The type of the internal input.
    */
    'type': string;
    /**
    * The value of the internal input.
    */
    'value': any;
  }
  interface AcInputBaseAttributes extends StencilHTMLAttributes {
    /**
    * The native HTMLInputElement autocapitalize attribute.
    */
    'autocapitalize'?: string;
    /**
    * The native HTMLInputElement autocomplete attribute.
    */
    'autocomplete'?: string;
    /**
    * The native HTMLInputElement autofocus attribute.
    */
    'autofocus'?: boolean;
    /**
    * The HTMLInputElement disabled attribute.
    */
    'disabled'?: boolean;
    /**
    * The label text of the this input group.
    */
    'label'?: string;
    /**
    * The native HTMLInputElement max attribute.
    */
    'max'?: number;
    /**
    * The native HTMLInputElement maxlength attribute.
    */
    'maxlength'?: number;
    /**
    * The native HTMLInputElement min attribute.
    */
    'min'?: number;
    /**
    * The native HTMLInputElement min attribute.
    */
    'minlength'?: number;
    /**
    * The render mode of the input.
    */
    'mode'?: 'compact';
    /**
    * The native HTMLInputElement name attribute.
    */
    'name'?: string;
    /**
    * The native HTMLInputElement pattern attribute.
    */
    'pattern'?: string;
    /**
    * Enable readonly.
    */
    'readonly'?: boolean;
    /**
    * The native HTMLInputElement required attribute.
    */
    'required'?: boolean;
    /**
    * The type of the internal input.
    */
    'type'?: string;
    /**
    * The value of the internal input.
    */
    'value'?: any;
  }

  interface AcNavdrawer {
    /**
    * Compact mode.
    */
    'compact': boolean;
    /**
    * The color theme.
    */
    'theme': string;
  }
  interface AcNavdrawerAttributes extends StencilHTMLAttributes {
    /**
    * Compact mode.
    */
    'compact'?: boolean;
    /**
    * The color theme.
    */
    'theme'?: string;
  }

  interface AcProgress {
    /**
    * Set the bar's percentage.
    */
    'percent': number;
    /**
    * Set the theme color.
    */
    'theme': string;
  }
  interface AcProgressAttributes extends StencilHTMLAttributes {
    /**
    * Set the bar's percentage.
    */
    'percent'?: number;
    /**
    * Set the theme color.
    */
    'theme'?: string;
  }

  interface AcStepper {
    /**
    * The number of concluded steps.
    */
    'done': number;
    /**
    * Increments the count of concluded steps.
    */
    'next': () => void;
    /**
    * Decrement the count of concluded steps.
    */
    'previous': () => void;
    /**
    * The count of steps to be displayed. TODO: It mighty support an array of steps in the future.
    */
    'steps': number;
  }
  interface AcStepperAttributes extends StencilHTMLAttributes {
    /**
    * The number of concluded steps.
    */
    'done'?: number;
    /**
    * Dispatched when the steps state changes.
    */
    'onChange'?: (event: CustomEvent<{ index: number }>) => void;
    /**
    * The count of steps to be displayed. TODO: It mighty support an array of steps in the future.
    */
    'steps'?: number;
  }

  interface AcTable {
    'fetch': any;
    'noResultsLabel': string;
    'options': Options;
    'params': any;
  }
  interface AcTableAttributes extends StencilHTMLAttributes {
    'fetch'?: any;
    'noResultsLabel'?: string;
    'options'?: Options;
    'params'?: any;
  }

  interface AcToastController {
    /**
    * An optional property used to refer the parent element that the component will be attached to.
    */
    'bound': string;
    /**
    * Set properties to the managed component.
    */
    'create': (props: ControllerComponentOptions<AcToast>) => Promise<any>;
    /**
    * Clear properties of the managed component.
    */
    'dismiss': (data: any) => Promise<any>;
  }
  interface AcToastControllerAttributes extends StencilHTMLAttributes {
    /**
    * An optional property used to refer the parent element that the component will be attached to.
    */
    'bound'?: string;
  }

  interface AcToast {
    'close': () => void;
    'message': string;
    'title': string;
    'type': 'alert' | 'success' | 'info' | 'warning';
  }
  interface AcToastAttributes extends StencilHTMLAttributes {
    'message'?: string;
    'onClose'?: (event: CustomEvent<void>) => void;
    'title'?: string;
    'type'?: 'alert' | 'success' | 'info' | 'warning';
  }

  interface AcInput {
    /**
    * The native HTMLInputElement autocapitalize attribute.
    */
    'autocapitalize': string;
    /**
    * The native HTMLInputElement autocomplete attribute.
    */
    'autocomplete': string;
    /**
    * The native HTMLInputElement autofocus attribute.
    */
    'autofocus': boolean;
    /**
    * The disabled mode.
    */
    'disabled': boolean;
    /**
    * Set the component in the error state with a message.
    */
    'error': string | boolean;
    /**
    * The FormFieldBehavior instance.
    */
    'formFieldBehavior': any;
    'getNativeFormField': () => any;
    /**
    * Get the unmasked value.
    */
    'getRawValue': (type?: string) => Promise<any>;
    /**
    * The helper text to guide the user.
    */
    'helperText': string;
    /**
    * The label text of the this input group.
    */
    'label': string;
    /**
    * The mask of the input.
    */
    'mask': string;
    /**
    * The native HTMLInputElement max attribute.
    */
    'max': number;
    /**
    * The native HTMLInputElement maxlength attribute.
    */
    'maxlength': number;
    /**
    * The native HTMLInputElement min attribute.
    */
    'min': number;
    /**
    * The native HTMLInputElement min attribute.
    */
    'minlength': number;
    /**
    * The HTML input field's name.
    */
    'name': string;
    /**
    * The native HTMLInputElement pattern attribute.
    */
    'pattern': string;
    /**
    * The native HTMLInputElement required attribute.
    */
    'required': boolean;
    /**
    * Set focus state in the native input.
    */
    'setFocus': () => any;
    /**
    * Update the value and run validations as if the user change it manually. When to use each: input.value will only update the value, useful to set the initial value of the input. input.setValue is useful to use values that are automatically set by an user's action, setting the unchecked state to the form.
    */
    'setValue': (value: any) => void;
    /**
    * The type of the internal input.
    */
    'type': string;
    /**
    * Request check validation on each input key event.
    */
    'validateOnKeyup': boolean;
    /**
    * The validations that this field need. This validations are checked on: - Blur event - Form submit event - Each keyUp event ONLY IF the validateOnKeyup property is present.
    */
    'validator': ValidatorFn | ValidatorFn[];
    /**
    * Get the last validity state from the checkValidity.
    */
    'validity': CustomValidityState;
    /**
    * The value of the internal input.
    */
    'value': any;
  }
  interface AcInputAttributes extends StencilHTMLAttributes {
    /**
    * The native HTMLInputElement autocapitalize attribute.
    */
    'autocapitalize'?: string;
    /**
    * The native HTMLInputElement autocomplete attribute.
    */
    'autocomplete'?: string;
    /**
    * The native HTMLInputElement autofocus attribute.
    */
    'autofocus'?: boolean;
    /**
    * The disabled mode.
    */
    'disabled'?: boolean;
    /**
    * Set the component in the error state with a message.
    */
    'error'?: string | boolean;
    /**
    * The FormFieldBehavior instance.
    */
    'formFieldBehavior'?: any;
    /**
    * The helper text to guide the user.
    */
    'helperText'?: string;
    /**
    * The label text of the this input group.
    */
    'label'?: string;
    /**
    * The mask of the input.
    */
    'mask'?: string;
    /**
    * The native HTMLInputElement max attribute.
    */
    'max'?: number;
    /**
    * The native HTMLInputElement maxlength attribute.
    */
    'maxlength'?: number;
    /**
    * The native HTMLInputElement min attribute.
    */
    'min'?: number;
    /**
    * The native HTMLInputElement min attribute.
    */
    'minlength'?: number;
    /**
    * The HTML input field's name.
    */
    'name'?: string;
    /**
    * The native HTMLInputElement pattern attribute.
    */
    'pattern'?: string;
    /**
    * The native HTMLInputElement required attribute.
    */
    'required'?: boolean;
    /**
    * The type of the internal input.
    */
    'type'?: string;
    /**
    * Request check validation on each input key event.
    */
    'validateOnKeyup'?: boolean;
    /**
    * The validations that this field need. This validations are checked on: - Blur event - Form submit event - Each keyUp event ONLY IF the validateOnKeyup property is present.
    */
    'validator'?: ValidatorFn | ValidatorFn[];
    /**
    * Get the last validity state from the checkValidity.
    */
    'validity'?: CustomValidityState;
    /**
    * The value of the internal input.
    */
    'value'?: any;
  }

  interface AcMenuItem {
    'href': string;
    'iconOnly': boolean;
  }
  interface AcMenuItemAttributes extends StencilHTMLAttributes {
    'href'?: string;
    'iconOnly'?: boolean;
  }

  interface AcMenu {
    'iconOnly': boolean;
  }
  interface AcMenuAttributes extends StencilHTMLAttributes {
    'iconOnly'?: boolean;
  }

  interface AcPagination {
    /**
    * Used to localize the Next button label.
    */
    'nextLabel': string;
    /**
    * Used to localize the Previous button label.
    */
    'previousLabel': string;
    /**
    * The selected page.
    */
    'selected': number;
    /**
    * The amount of pages.
    */
    'totalPages': number;
  }
  interface AcPaginationAttributes extends StencilHTMLAttributes {
    /**
    * Used to localize the Next button label.
    */
    'nextLabel'?: string;
    /**
    * Used to localize the Previous button label.
    */
    'previousLabel'?: string;
    /**
    * The selected page.
    */
    'selected'?: number;
    /**
    * The amount of pages.
    */
    'totalPages'?: number;
  }

  interface AcSelect {
    /**
    * Set the disabled mode.
    */
    'disabled': boolean;
    /**
    * Set the field in the error state with a message.
    */
    'error': string | boolean;
    /**
    * The instance of the FormFieldBehavior.
    */
    'formFieldBehavior': any;
    'getNativeFormField': () => Promise<HTMLSelectElement>;
    'getSelectedOptions': () => Promise<SelectOption<{}>[]>;
    /**
    * The helper text to guide the user.
    */
    'helperText': string;
    /**
    * The label text of the this input group.
    */
    'label': string;
    /**
    * Set the loading mode, showing a loading icon.
    */
    'loading': boolean;
    /**
    * If true, the component will handle multiple selected items.
    */
    'multiple': boolean;
    /**
    * The name of the internal input.
    */
    'name': string;
    /**
    * Set the custom empty result text.
    */
    'noResultsText': string;
    /**
    * The options that will be displayed in the panel.
    */
    'options': SelectOption[];
    /**
    * The native required attribute.
    */
    'required': boolean;
    /**
    * Set the search mode.
    */
    'searchable': boolean;
    'setValue': (values: any) => Promise<void>;
    /**
    * The validator functions.
    */
    'validator': ValidatorFn | ValidatorFn[];
    /**
    * The validity state.
    */
    'validity': CustomValidityState;
    /**
    * The value of the internal input.
    */
    'value': any[] | any;
  }
  interface AcSelectAttributes extends StencilHTMLAttributes {
    /**
    * Set the disabled mode.
    */
    'disabled'?: boolean;
    /**
    * Set the field in the error state with a message.
    */
    'error'?: string | boolean;
    /**
    * The instance of the FormFieldBehavior.
    */
    'formFieldBehavior'?: any;
    /**
    * The helper text to guide the user.
    */
    'helperText'?: string;
    /**
    * The label text of the this input group.
    */
    'label'?: string;
    /**
    * Set the loading mode, showing a loading icon.
    */
    'loading'?: boolean;
    /**
    * If true, the component will handle multiple selected items.
    */
    'multiple'?: boolean;
    /**
    * The name of the internal input.
    */
    'name'?: string;
    /**
    * Set the custom empty result text.
    */
    'noResultsText'?: string;
    /**
    * Fired when the user select/deselect an option.
    */
    'onChange'?: (event: CustomEvent<any>) => void;
    /**
    * The options that will be displayed in the panel.
    */
    'options'?: SelectOption[];
    /**
    * The native required attribute.
    */
    'required'?: boolean;
    /**
    * Set the search mode.
    */
    'searchable'?: boolean;
    /**
    * The validator functions.
    */
    'validator'?: ValidatorFn | ValidatorFn[];
    /**
    * The validity state.
    */
    'validity'?: CustomValidityState;
    /**
    * The value of the internal input.
    */
    'value'?: any[] | any;
  }

  interface AcTab {
    /**
    * If true, mark this tab as a selected tab.
    */
    'active': boolean;
    /**
    * Set this tab in compact mode.
    */
    'compact': boolean;
  }
  interface AcTabAttributes extends StencilHTMLAttributes {
    /**
    * If true, mark this tab as a selected tab.
    */
    'active'?: boolean;
    /**
    * Set this tab in compact mode.
    */
    'compact'?: boolean;
  }

  interface AcTabs {
    'compact': boolean;
    'selected': string | number;
    /**
    * The theme color defined in the color palette. The default is primary.
    */
    'theme': string;
  }
  interface AcTabsAttributes extends StencilHTMLAttributes {
    'compact'?: boolean;
    'onTabChange'?: (event: CustomEvent<string>) => void;
    'selected'?: string | number;
    /**
    * The theme color defined in the color palette. The default is primary.
    */
    'theme'?: string;
  }

  interface AcModalController {
    /**
    * An optional property used to refer the parent element that the component will be attached to.
    */
    'bound': string;
    /**
    * Setup a new modal on the screen.
    */
    'create': (props: ControllerComponentOptions<AcModal & AcOverlay>) => Promise<any>;
    /**
    * Clear all modals that are displayed.
    */
    'dismiss': (data: any) => Promise<any>;
  }
  interface AcModalControllerAttributes extends StencilHTMLAttributes {
    /**
    * An optional property used to refer the parent element that the component will be attached to.
    */
    'bound'?: string;
  }

  interface AcModal {
    /**
    * The title that will be displayed on the modal.
    */
    'title': string;
  }
  interface AcModalAttributes extends StencilHTMLAttributes {
    /**
    * Dispatched when the modal closes.
    */
    'onClose'?: (event: CustomEvent<void>) => void;
    /**
    * The title that will be displayed on the modal.
    */
    'title'?: string;
  }

  interface AcPanelController {
    /**
    * An optional property used to refer the parent element that the component will be attached to.
    */
    'bound': string;
    /**
    * Setup a new modal on the screen.
    */
    'create': (props: ControllerComponentOptions<AcPanel & AcPopper>) => Promise<any>;
    /**
    * Clear all modals that are displayed.
    */
    'dismiss': (elt?: any) => Promise<any>;
  }
  interface AcPanelControllerAttributes extends StencilHTMLAttributes {
    /**
    * An optional property used to refer the parent element that the component will be attached to.
    */
    'bound'?: string;
  }

  interface AcPanel {}
  interface AcPanelAttributes extends StencilHTMLAttributes {
    /**
    * Dispatched when the modal closes.
    */
    'onClose'?: (event: CustomEvent<void>) => void;
  }

  interface AcUpload {
    'handleClick': () => void;
    'name': string;
    'removeFiles': () => void;
    /**
    * The theme color defined in the color palette. The default is primary.
    */
    'theme': string;
    /**
    * Text introduced in Button upload.
    */
    'uploadButtonText': string;
    'value': FileList;
  }
  interface AcUploadAttributes extends StencilHTMLAttributes {
    'name'?: string;
    /**
    * Event when a file is dropped.
    */
    'onChange'?: (event: CustomEvent<FileList>) => void;
    /**
    * The theme color defined in the color palette. The default is primary.
    */
    'theme'?: string;
    /**
    * Text introduced in Button upload.
    */
    'uploadButtonText'?: string;
    'value'?: FileList;
  }

  interface AcOverlay {
    /**
    * The backdrop theme.
    */
    'backdrop': 'dark' | 'light';
    'disableClose': boolean;
    'handleBackDropClick': () => void;
    'noLayer': boolean;
    /**
    * Content position based on flex layout.
    */
    'position': 'start start' | 'start center' | 'start flex-end' |
    'center start' | 'center center' | 'center flex-end' |
    'flex-end start' | 'flex-end center' | 'flex-end flex-end';
    /**
    * Used to pass the custom children to the portal.
    */
    'vchildren': any;
  }
  interface AcOverlayAttributes extends StencilHTMLAttributes {
    /**
    * The backdrop theme.
    */
    'backdrop'?: 'dark' | 'light';
    'disableClose'?: boolean;
    'noLayer'?: boolean;
    'onBackDropClick'?: (event: CustomEvent<void>) => void;
    /**
    * Content position based on flex layout.
    */
    'position'?: 'start start' | 'start center' | 'start flex-end' |
    'center start' | 'center center' | 'center flex-end' |
    'flex-end start' | 'flex-end center' | 'flex-end flex-end';
    /**
    * Used to pass the custom children to the portal.
    */
    'vchildren'?: any;
  }

  interface AcPopper {
    /**
    * Popper.js's options.
    */
    'popperOptions': PopperOptions;
    /**
    * Pivot element used to place the popper.
    */
    'popperPivot': string | HTMLElement;
    /**
    * Popper.js's placement.
    */
    'popperPlacement': Placement;
    /**
    * Used to pass the custom children to the portal.
    */
    'vchildren': any;
  }
  interface AcPopperAttributes extends StencilHTMLAttributes {
    /**
    * Popper.js's options.
    */
    'popperOptions'?: PopperOptions;
    /**
    * Pivot element used to place the popper.
    */
    'popperPivot'?: string | HTMLElement;
    /**
    * Popper.js's placement.
    */
    'popperPlacement'?: Placement;
    /**
    * Used to pass the custom children to the portal.
    */
    'vchildren'?: any;
  }

  interface AcPortal {
    /**
    * Used to pass the custom children to the portal.
    */
    'vchildren': any;
  }
  interface AcPortalAttributes extends StencilHTMLAttributes {
    /**
    * Used to pass the custom children to the portal.
    */
    'vchildren'?: any;
  }

  interface AcLayout {
    /**
    * Collapse a nav drawer.
    */
    'collapsed': 'nav-left';
  }
  interface AcLayoutAttributes extends StencilHTMLAttributes {
    /**
    * Collapse a nav drawer.
    */
    'collapsed'?: 'nav-left';
    'onContentScroll'?: (event: CustomEvent<{top: number, left: number}>) => void;
  }
}

declare global {
  interface StencilElementInterfaces {
    'AcBadge': Components.AcBadge;
    'AcButton': Components.AcButton;
    'AcCard': Components.AcCard;
    'AcCheck': Components.AcCheck;
    'AcGauge': Components.AcGauge;
    'AcHeader': Components.AcHeader;
    'AcInputBase': Components.AcInputBase;
    'AcNavdrawer': Components.AcNavdrawer;
    'AcProgress': Components.AcProgress;
    'AcStepper': Components.AcStepper;
    'AcTable': Components.AcTable;
    'AcToastController': Components.AcToastController;
    'AcToast': Components.AcToast;
    'AcInput': Components.AcInput;
    'AcMenuItem': Components.AcMenuItem;
    'AcMenu': Components.AcMenu;
    'AcPagination': Components.AcPagination;
    'AcSelect': Components.AcSelect;
    'AcTab': Components.AcTab;
    'AcTabs': Components.AcTabs;
    'AcModalController': Components.AcModalController;
    'AcModal': Components.AcModal;
    'AcPanelController': Components.AcPanelController;
    'AcPanel': Components.AcPanel;
    'AcUpload': Components.AcUpload;
    'AcOverlay': Components.AcOverlay;
    'AcPopper': Components.AcPopper;
    'AcPortal': Components.AcPortal;
    'AcLayout': Components.AcLayout;
  }

  interface StencilIntrinsicElements {
    'ac-badge': Components.AcBadgeAttributes;
    'ac-button': Components.AcButtonAttributes;
    'ac-card': Components.AcCardAttributes;
    'ac-check': Components.AcCheckAttributes;
    'ac-gauge': Components.AcGaugeAttributes;
    'ac-header': Components.AcHeaderAttributes;
    'ac-input-base': Components.AcInputBaseAttributes;
    'ac-navdrawer': Components.AcNavdrawerAttributes;
    'ac-progress': Components.AcProgressAttributes;
    'ac-stepper': Components.AcStepperAttributes;
    'ac-table': Components.AcTableAttributes;
    'ac-toast-controller': Components.AcToastControllerAttributes;
    'ac-toast': Components.AcToastAttributes;
    'ac-input': Components.AcInputAttributes;
    'ac-menu-item': Components.AcMenuItemAttributes;
    'ac-menu': Components.AcMenuAttributes;
    'ac-pagination': Components.AcPaginationAttributes;
    'ac-select': Components.AcSelectAttributes;
    'ac-tab': Components.AcTabAttributes;
    'ac-tabs': Components.AcTabsAttributes;
    'ac-modal-controller': Components.AcModalControllerAttributes;
    'ac-modal': Components.AcModalAttributes;
    'ac-panel-controller': Components.AcPanelControllerAttributes;
    'ac-panel': Components.AcPanelAttributes;
    'ac-upload': Components.AcUploadAttributes;
    'ac-overlay': Components.AcOverlayAttributes;
    'ac-popper': Components.AcPopperAttributes;
    'ac-portal': Components.AcPortalAttributes;
    'ac-layout': Components.AcLayoutAttributes;
  }


  interface HTMLAcBadgeElement extends Components.AcBadge, HTMLStencilElement {}
  var HTMLAcBadgeElement: {
    prototype: HTMLAcBadgeElement;
    new (): HTMLAcBadgeElement;
  };

  interface HTMLAcButtonElement extends Components.AcButton, HTMLStencilElement {}
  var HTMLAcButtonElement: {
    prototype: HTMLAcButtonElement;
    new (): HTMLAcButtonElement;
  };

  interface HTMLAcCardElement extends Components.AcCard, HTMLStencilElement {}
  var HTMLAcCardElement: {
    prototype: HTMLAcCardElement;
    new (): HTMLAcCardElement;
  };

  interface HTMLAcCheckElement extends Components.AcCheck, HTMLStencilElement {}
  var HTMLAcCheckElement: {
    prototype: HTMLAcCheckElement;
    new (): HTMLAcCheckElement;
  };

  interface HTMLAcGaugeElement extends Components.AcGauge, HTMLStencilElement {}
  var HTMLAcGaugeElement: {
    prototype: HTMLAcGaugeElement;
    new (): HTMLAcGaugeElement;
  };

  interface HTMLAcHeaderElement extends Components.AcHeader, HTMLStencilElement {}
  var HTMLAcHeaderElement: {
    prototype: HTMLAcHeaderElement;
    new (): HTMLAcHeaderElement;
  };

  interface HTMLAcInputBaseElement extends Components.AcInputBase, HTMLStencilElement {}
  var HTMLAcInputBaseElement: {
    prototype: HTMLAcInputBaseElement;
    new (): HTMLAcInputBaseElement;
  };

  interface HTMLAcNavdrawerElement extends Components.AcNavdrawer, HTMLStencilElement {}
  var HTMLAcNavdrawerElement: {
    prototype: HTMLAcNavdrawerElement;
    new (): HTMLAcNavdrawerElement;
  };

  interface HTMLAcProgressElement extends Components.AcProgress, HTMLStencilElement {}
  var HTMLAcProgressElement: {
    prototype: HTMLAcProgressElement;
    new (): HTMLAcProgressElement;
  };

  interface HTMLAcStepperElement extends Components.AcStepper, HTMLStencilElement {}
  var HTMLAcStepperElement: {
    prototype: HTMLAcStepperElement;
    new (): HTMLAcStepperElement;
  };

  interface HTMLAcTableElement extends Components.AcTable, HTMLStencilElement {}
  var HTMLAcTableElement: {
    prototype: HTMLAcTableElement;
    new (): HTMLAcTableElement;
  };

  interface HTMLAcToastControllerElement extends Components.AcToastController, HTMLStencilElement {}
  var HTMLAcToastControllerElement: {
    prototype: HTMLAcToastControllerElement;
    new (): HTMLAcToastControllerElement;
  };

  interface HTMLAcToastElement extends Components.AcToast, HTMLStencilElement {}
  var HTMLAcToastElement: {
    prototype: HTMLAcToastElement;
    new (): HTMLAcToastElement;
  };

  interface HTMLAcInputElement extends Components.AcInput, HTMLStencilElement {}
  var HTMLAcInputElement: {
    prototype: HTMLAcInputElement;
    new (): HTMLAcInputElement;
  };

  interface HTMLAcMenuItemElement extends Components.AcMenuItem, HTMLStencilElement {}
  var HTMLAcMenuItemElement: {
    prototype: HTMLAcMenuItemElement;
    new (): HTMLAcMenuItemElement;
  };

  interface HTMLAcMenuElement extends Components.AcMenu, HTMLStencilElement {}
  var HTMLAcMenuElement: {
    prototype: HTMLAcMenuElement;
    new (): HTMLAcMenuElement;
  };

  interface HTMLAcPaginationElement extends Components.AcPagination, HTMLStencilElement {}
  var HTMLAcPaginationElement: {
    prototype: HTMLAcPaginationElement;
    new (): HTMLAcPaginationElement;
  };

  interface HTMLAcSelectElement extends Components.AcSelect, HTMLStencilElement {}
  var HTMLAcSelectElement: {
    prototype: HTMLAcSelectElement;
    new (): HTMLAcSelectElement;
  };

  interface HTMLAcTabElement extends Components.AcTab, HTMLStencilElement {}
  var HTMLAcTabElement: {
    prototype: HTMLAcTabElement;
    new (): HTMLAcTabElement;
  };

  interface HTMLAcTabsElement extends Components.AcTabs, HTMLStencilElement {}
  var HTMLAcTabsElement: {
    prototype: HTMLAcTabsElement;
    new (): HTMLAcTabsElement;
  };

  interface HTMLAcModalControllerElement extends Components.AcModalController, HTMLStencilElement {}
  var HTMLAcModalControllerElement: {
    prototype: HTMLAcModalControllerElement;
    new (): HTMLAcModalControllerElement;
  };

  interface HTMLAcModalElement extends Components.AcModal, HTMLStencilElement {}
  var HTMLAcModalElement: {
    prototype: HTMLAcModalElement;
    new (): HTMLAcModalElement;
  };

  interface HTMLAcPanelControllerElement extends Components.AcPanelController, HTMLStencilElement {}
  var HTMLAcPanelControllerElement: {
    prototype: HTMLAcPanelControllerElement;
    new (): HTMLAcPanelControllerElement;
  };

  interface HTMLAcPanelElement extends Components.AcPanel, HTMLStencilElement {}
  var HTMLAcPanelElement: {
    prototype: HTMLAcPanelElement;
    new (): HTMLAcPanelElement;
  };

  interface HTMLAcUploadElement extends Components.AcUpload, HTMLStencilElement {}
  var HTMLAcUploadElement: {
    prototype: HTMLAcUploadElement;
    new (): HTMLAcUploadElement;
  };

  interface HTMLAcOverlayElement extends Components.AcOverlay, HTMLStencilElement {}
  var HTMLAcOverlayElement: {
    prototype: HTMLAcOverlayElement;
    new (): HTMLAcOverlayElement;
  };

  interface HTMLAcPopperElement extends Components.AcPopper, HTMLStencilElement {}
  var HTMLAcPopperElement: {
    prototype: HTMLAcPopperElement;
    new (): HTMLAcPopperElement;
  };

  interface HTMLAcPortalElement extends Components.AcPortal, HTMLStencilElement {}
  var HTMLAcPortalElement: {
    prototype: HTMLAcPortalElement;
    new (): HTMLAcPortalElement;
  };

  interface HTMLAcLayoutElement extends Components.AcLayout, HTMLStencilElement {}
  var HTMLAcLayoutElement: {
    prototype: HTMLAcLayoutElement;
    new (): HTMLAcLayoutElement;
  };

  interface HTMLElementTagNameMap {
    'ac-badge': HTMLAcBadgeElement
    'ac-button': HTMLAcButtonElement
    'ac-card': HTMLAcCardElement
    'ac-check': HTMLAcCheckElement
    'ac-gauge': HTMLAcGaugeElement
    'ac-header': HTMLAcHeaderElement
    'ac-input-base': HTMLAcInputBaseElement
    'ac-navdrawer': HTMLAcNavdrawerElement
    'ac-progress': HTMLAcProgressElement
    'ac-stepper': HTMLAcStepperElement
    'ac-table': HTMLAcTableElement
    'ac-toast-controller': HTMLAcToastControllerElement
    'ac-toast': HTMLAcToastElement
    'ac-input': HTMLAcInputElement
    'ac-menu-item': HTMLAcMenuItemElement
    'ac-menu': HTMLAcMenuElement
    'ac-pagination': HTMLAcPaginationElement
    'ac-select': HTMLAcSelectElement
    'ac-tab': HTMLAcTabElement
    'ac-tabs': HTMLAcTabsElement
    'ac-modal-controller': HTMLAcModalControllerElement
    'ac-modal': HTMLAcModalElement
    'ac-panel-controller': HTMLAcPanelControllerElement
    'ac-panel': HTMLAcPanelElement
    'ac-upload': HTMLAcUploadElement
    'ac-overlay': HTMLAcOverlayElement
    'ac-popper': HTMLAcPopperElement
    'ac-portal': HTMLAcPortalElement
    'ac-layout': HTMLAcLayoutElement
  }

  interface ElementTagNameMap {
    'ac-badge': HTMLAcBadgeElement;
    'ac-button': HTMLAcButtonElement;
    'ac-card': HTMLAcCardElement;
    'ac-check': HTMLAcCheckElement;
    'ac-gauge': HTMLAcGaugeElement;
    'ac-header': HTMLAcHeaderElement;
    'ac-input-base': HTMLAcInputBaseElement;
    'ac-navdrawer': HTMLAcNavdrawerElement;
    'ac-progress': HTMLAcProgressElement;
    'ac-stepper': HTMLAcStepperElement;
    'ac-table': HTMLAcTableElement;
    'ac-toast-controller': HTMLAcToastControllerElement;
    'ac-toast': HTMLAcToastElement;
    'ac-input': HTMLAcInputElement;
    'ac-menu-item': HTMLAcMenuItemElement;
    'ac-menu': HTMLAcMenuElement;
    'ac-pagination': HTMLAcPaginationElement;
    'ac-select': HTMLAcSelectElement;
    'ac-tab': HTMLAcTabElement;
    'ac-tabs': HTMLAcTabsElement;
    'ac-modal-controller': HTMLAcModalControllerElement;
    'ac-modal': HTMLAcModalElement;
    'ac-panel-controller': HTMLAcPanelControllerElement;
    'ac-panel': HTMLAcPanelElement;
    'ac-upload': HTMLAcUploadElement;
    'ac-overlay': HTMLAcOverlayElement;
    'ac-popper': HTMLAcPopperElement;
    'ac-portal': HTMLAcPortalElement;
    'ac-layout': HTMLAcLayoutElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
