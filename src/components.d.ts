/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';


import {
  Event,
  EventEmitter,
} from '@stencil/core';
import {
  AcPanelOption,
} from './components/molecules/ac-select/ac-select';


export namespace Components {

  interface AcButton {
    'iconOnly': boolean;
    'size': string;
    'theme': string;
    'tooltip': string;
    'type': string;
  }
  interface AcButtonAttributes extends StencilHTMLAttributes {
    'iconOnly'?: boolean;
    'size'?: string;
    'theme'?: string;
    'tooltip'?: string;
    'type'?: string;
  }

  interface AcFaIcon {
    'icon': any;
    'size': number;
  }
  interface AcFaIconAttributes extends StencilHTMLAttributes {
    'icon'?: any;
    'size'?: number;
  }

  interface AcInputBase {
    'label': string;
    'type': string;
    'value': any;
  }
  interface AcInputBaseAttributes extends StencilHTMLAttributes {
    'label'?: string;
    'onChange'?: (event: CustomEvent<Event>) => void;
    'onOnBlur'?: (event: CustomEvent<FocusEvent>) => void;
    'onOnFocus'?: (event: CustomEvent<FocusEvent>) => void;
    'type'?: string;
    'value'?: any;
  }

  interface AcInput {
    'helperText': string;
    'label': string;
    'type': string;
    'value': any;
  }
  interface AcInputAttributes extends StencilHTMLAttributes {
    'helperText'?: string;
    'label'?: string;
    'onOnBlur'?: (event: CustomEvent<FocusEvent>) => void;
    'onOnFocus'?: (event: CustomEvent<FocusEvent>) => void;
    'onOnInput'?: (event: CustomEvent<KeyboardEvent>) => void;
    'type'?: string;
    'value'?: any;
  }

  interface AcSelect {
    'helperText': string;
    'label': string;
    'options': AcPanelOption[];
    'value': any;
  }
  interface AcSelectAttributes extends StencilHTMLAttributes {
    'helperText'?: string;
    'label'?: string;
    'onOnBlur'?: (event: CustomEvent<FocusEvent>) => void;
    'onOnFocus'?: (event: CustomEvent<FocusEvent>) => void;
    'onOnInput'?: (event: CustomEvent<KeyboardEvent>) => void;
    'options'?: AcPanelOption[];
    'value'?: any;
  }
}

declare global {
  interface StencilElementInterfaces {
    'AcButton': Components.AcButton;
    'AcFaIcon': Components.AcFaIcon;
    'AcInputBase': Components.AcInputBase;
    'AcInput': Components.AcInput;
    'AcSelect': Components.AcSelect;
  }

  interface StencilIntrinsicElements {
    'ac-button': Components.AcButtonAttributes;
    'ac-fa-icon': Components.AcFaIconAttributes;
    'ac-input-base': Components.AcInputBaseAttributes;
    'ac-input': Components.AcInputAttributes;
    'ac-select': Components.AcSelectAttributes;
  }


  interface HTMLAcButtonElement extends Components.AcButton, HTMLStencilElement {}
  var HTMLAcButtonElement: {
    prototype: HTMLAcButtonElement;
    new (): HTMLAcButtonElement;
  };

  interface HTMLAcFaIconElement extends Components.AcFaIcon, HTMLStencilElement {}
  var HTMLAcFaIconElement: {
    prototype: HTMLAcFaIconElement;
    new (): HTMLAcFaIconElement;
  };

  interface HTMLAcInputBaseElement extends Components.AcInputBase, HTMLStencilElement {}
  var HTMLAcInputBaseElement: {
    prototype: HTMLAcInputBaseElement;
    new (): HTMLAcInputBaseElement;
  };

  interface HTMLAcInputElement extends Components.AcInput, HTMLStencilElement {}
  var HTMLAcInputElement: {
    prototype: HTMLAcInputElement;
    new (): HTMLAcInputElement;
  };

  interface HTMLAcSelectElement extends Components.AcSelect, HTMLStencilElement {}
  var HTMLAcSelectElement: {
    prototype: HTMLAcSelectElement;
    new (): HTMLAcSelectElement;
  };

  interface HTMLElementTagNameMap {
    'ac-button': HTMLAcButtonElement
    'ac-fa-icon': HTMLAcFaIconElement
    'ac-input-base': HTMLAcInputBaseElement
    'ac-input': HTMLAcInputElement
    'ac-select': HTMLAcSelectElement
  }

  interface ElementTagNameMap {
    'ac-button': HTMLAcButtonElement;
    'ac-fa-icon': HTMLAcFaIconElement;
    'ac-input-base': HTMLAcInputBaseElement;
    'ac-input': HTMLAcInputElement;
    'ac-select': HTMLAcSelectElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
